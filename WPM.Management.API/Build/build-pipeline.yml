trigger:
- master

pool:
 vmImage: 'ubuntu-latest'
 
steps:
 - task: DotNetCoreCLI@2
   inputs:
     command: 'restore'
     feedsToUse: 'select'
     vstsFeed: 'bb5e0499-651d-49a4-8f54-1a07c573a7e9'

 - task: DotNetCoreCLI@2
   inputs:
    command: 'build'
    projects: '**/*.csproj'

 - task: DotNetCoreCLI@2
   displayName : 'Install report generator'
   inputs :
     command : 'custom'
     custom : 'tool'
     argument : 'install --global dotnet-reportgenerator-globaltool'

 - task: DotNetCoreCLI@2
   displayName : 'Run Unit Test'
   inputs :
     command : 'test'
    
     argument : '--no-build --configuration Debug /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p: CoverletOutput=$(Build.SourcesDirectory)/TestResult/Coverage'
     publishTestResults: true
     projects : '**/*.Tests.csproj'

 - script:
     reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
   displayName: 'Create Code coverage report'

 - task: PublishCodeCovergeResult@1
   displayName : 'Publish Code Coverage Result'
   inputs :
     codeCoverageTool : 'cobertura'
     summaryFileLocation : '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

 - task: DotNetCoreCLI@2
   inputs:
    command: 'test'
    projects: '**/*.Tests.csproj'

 - task: CopyFiles@2
   inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)/WPM.Management.API/bin'
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

 - task: PublishBuildArtifacts@1
   inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
  
  
 - script : echo all done
   displayName : 'All done'
    


     